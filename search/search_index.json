{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Elijah Wood's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Rust setup","text":"<p>Welcome! In this tutorial you will learn how to setup a development container for Rust and code \"Hello, world\". Rust is a coding language that has burst onto the CS scene in popularity because of its safety, performance, and productivity. Learning the basics through this tutorial will help you grow as a programmer!</p>"},{"location":"tutorials/rust-setup/#hello-world-tutorial-for-rust","title":"\"Hello, World\" Tutorial for Rust","text":"<ul> <li>Primary author: Elijah Wood</li> <li>Reviewer: Carmine Anderson - Falconi</li> </ul>"},{"location":"tutorials/rust-setup/#what-you-will-learn","title":"What You Will Learn","text":"<ul> <li>Create a new local git repository</li> <li>Create a basic Rust dev container in VS Code</li> <li>Understand how the dev container helps us</li> <li>Create a basic program in Rust</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the following before beginning:</p> <ol> <li>A Github account</li> <li>Git installed</li> <li>Visual Studio Code (VS Code)</li> <li>Docker installed</li> <li>Command-line basics</li> </ol>"},{"location":"tutorials/rust-setup/#part-1-creating-your-repository","title":"Part 1: Creating Your Repository","text":""},{"location":"tutorials/rust-setup/#step-1-creating-a-local-repository","title":"Step 1: Creating a Local Repository","text":"<ol> <li>Open a new terminal or command window.</li> <li>Create a new directory (folder) for this project: <pre><code>mkdir basic-rust-program\ncd basic-rust-program\n</code></pre></li> <li>Initialize a new git repository in this directory: <pre><code>git init\n</code></pre></li> </ol> <p>What is <code>git init</code>?</p> <p>git init creates a new invisible repository in our current directy \".git\" which will store your future version history to maintain version control.</p> <ol> <li>Create a README.md file: <pre><code>echo \"Tutorial Link: https://elijahwood2003.github.io/comp423-course-notes/tutorials/rust-setup/\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2: Create a Remote Repository on Github","text":"<ol> <li>Log in to your Github and locate Create New Repository.</li> <li>Fill in the details as follows:</li> </ol>"},{"location":"tutorials/rust-setup/#_1","title":"Rust setup","text":"<ul> <li>Repository Name: basic-rust-program</li> <li>Description: Basic Rust program based on the tutorial in README.md</li> <li>Visibility: Public</li> <li>Click Create Repository.</li> </ul>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3: Link Your Local Repository to Github","text":"<ol> <li>Paste the following into your local VS Code terminal: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/basic-rust-program.git\n</code></pre> Make sure to replace <code>&lt;your-username&gt;</code> with your Github username.</li> <li>Type <code>git branch</code> in the terminal and ensure it says your default branch is <code>main</code>. If it isn't, rename it with <code>git branch -M main</code>.</li> </ol> <p>Why do we run this command?</p> <p>In some systems the default branch name is <code>default</code> - for the sake of keeping the branch names consistent for future commands, it makes it easier to ensure the default branch name is <code>main</code>. </p> <ol> <li>Push your local changes to the Github repository: <pre><code>git push -u origin main\n</code></pre></li> <li>In your web browser, refresh the Github page and you should see your changes in the Github repository.</li> </ol>"},{"location":"tutorials/rust-setup/#part-2-setting-up-your-development-container","title":"Part 2: Setting Up Your Development Container","text":""},{"location":"tutorials/rust-setup/#introduction-to-dev-containers","title":"Introduction to Dev Containers","text":"<p>When you are working on a project, you want to ensure you not only have the packages required, but the correct versions of each of those packages to maintain stability of your project. A development container ensures your program works consistently across machines.</p>"},{"location":"tutorials/rust-setup/#setup-within-vs-code","title":"Setup Within VS Code","text":"<ol> <li>Open up VS Code - click on \"Open Folder\" then open the <code>basic-rust-program</code> directory.</li> <li>Navigate to the extensions tab on the left of your VS Code window. Search \"Dev Containers\" and download the extension.</li> <li>In the root directory of your project, add a <code>.devcontainer</code> directory. Then add the following file to this directory: <code>.devcontainer/devcontainer.json</code>. Within <code>devcontainer.json</code> paste the following code: <pre><code>{\n  \"name\": \"Basic Rust Program\",\n  \"image\": \"mcr.microsoft.com/vscode/devcontainers/rust:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#_2","title":"Rust setup","text":"<ul> <li><code>name</code>: The title of your dev container.</li> <li><code>image</code>: The Rust dev container image you will use; in this case, the latest development environment for Rust from Microsoft.</li> <li><code>customizations</code>: Adds configurations we need for the Rust dev container in VS Code. <code>rust-lang.rust-analyzer</code> is the extension we need for VS Code to run Rust.</li> </ul>"},{"location":"tutorials/rust-setup/#_3","title":"Rust setup","text":"WARNING <p>Make sure your docker is opened before you move onto the next step.</p> <p>If this next step still doesn't work, make sure you check spelling.</p>"},{"location":"tutorials/rust-setup/#reopen-your-project-in-the-dev-container","title":"Reopen Your Project in the Dev Container","text":"<p>Now that you've added the <code>devcontainer.json</code> file, you're ready to reopen your project in your dev container! To do this press <code>Ctrl+Shift+P</code> on Windows, or <code>Cmd+Shift+P</code> on Mac. Then type in \"Dev Containers: Reopen in Container,\" and select the option prompted.</p> <p>Once your dev container finishes loading, close the current terminal and open a new terminal (Terminal &gt; New Terminal). Ensure you are running the latest version of Rust by typing the command <code>rustc --version</code>. It should be approximately 1.83.0.</p>"},{"location":"tutorials/rust-setup/#part-3-creating-a-basic-rust-program","title":"Part 3: Creating a Basic Rust Program","text":""},{"location":"tutorials/rust-setup/#creating-your-program","title":"Creating Your Program","text":"<ul> <li>Go to a new local terminal in VS Code and run the commands:  <pre><code>cargo new --vcs none basic-program\ncd basic-program\n</code></pre></li> </ul>"},{"location":"tutorials/rust-setup/#_4","title":"Rust setup","text":"<ul> <li><code>cargo new --vcs none basic-program</code>: Creates a new binary project, and the <code>--vcs none</code> flag removes the automatic function of creating a new .git repository on your behalf. The binary project is composed of a new directory named <code>basic-program</code> with <code>src</code> in it and a new <code>main.rs</code> file within the <code>src</code> directory. It also includes a <code>Cargo.toml</code> file which manages the version of your binary project.</li> <li><code>cd basic-program</code>: Sets our current working directory into this new repository we've created.</li> </ul> <p>What is the <code>.rs</code> file extension?</p> <p><code>.rs</code> is the default Rust file extension. Anytime you are writing a Rust program it is important to add this to the end of the file to ensure the program knows it is writing to Rust.</p> <p>Locate <code>main.rs</code> and replace the code in it with the following: <pre><code>// Prints \"Hello COMP423!\" to the terminal\nfn main(){\n    println!(\"Hello COMP423!\");\n}\n</code></pre></p>"},{"location":"tutorials/rust-setup/#understanding-your-program","title":"Understanding Your Program","text":"<ul> <li><code>//</code> indicates a comment to the code; the compiler will ignore everything on the line after it</li> <li><code>fn main()</code> defines a new function called main for the program to call.</li> <li><code>println!</code> prints the string within the parentheses to the terminal.</li> </ul>"},{"location":"tutorials/rust-setup/#compiling-and-running","title":"Compiling and Running","text":""},{"location":"tutorials/rust-setup/#there-are-two-options-for-compiling-and-running","title":"There are two options for compiling and running:","text":"<ul> <li>Run <code>cargo build</code>: Compiles your rust code into a new executable. It performs a similar function that <code>gcc [file]</code> ran in COMP211 for our C programs. Then find the executable file in your directory and type the name of the executable into your terminal to run it.</li> <li>Run <code>cargo run</code>: Compiles your code into an executable AND runs it. Doing this is most common to see your results faster and easier.</li> </ul> <p>Once you run either of the steps above, if you see \"Hello COMP423!\" in the terminal, congratulations! You have created your first Rust program successfully!</p>"},{"location":"tutorials/rust-setup/#stage-and-commit-your-changes-to-git","title":"Stage and Commit Your Changes to Git","text":"<p>Once you're satisfied with your code, run the following in your local VS Code terminal: <pre><code>git add .\ngit commit -m \"Added Hello COMP423 Program\"\n</code></pre></p> <p>You must then push your edits using the following command: <pre><code>git push origin\n</code></pre></p> <p>Understanding Git Commands</p> <p><code>git add .</code> adds all directory files to the git stage. Essentially, it 'prepares' your changes to be committed. <code>git commit -m \"First commit\"</code> commits these staged changes to your version control, storing a snapshop of these files to your version control.</p>"},{"location":"tutorials/rust-setup/#citations","title":"Citations","text":"<ul> <li>423 MkDocs Tutorial</li> <li>Microsoft Dev Containers</li> </ul>"}]}